schema {
    query: Query
    mutation: Mutation
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type Comment {
    author: User!
    id: ID!
    post: Post!
    text: String!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    data: Comment!
}

type Mutation {
    createComment(data: CreateCommentInput!): Comment!
    createPost(data: CreatePostInput!): Post!
    createUser(data: CreateUserInput!): User!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    deletePost(id: ID!): Post!
    deleteUser(id: ID!): User!
}

type Post {
    author: User!
    body: String!
    comments: [Comment]!
    id: ID!
    published: Boolean!
    title: String!
}

type PostSubscriptionPayload {
    mutation: MutationType!
    data: Post!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

type Query {
    comments: [Comment!]!
    posts(query: String): [Post!]!
    user(id: ID!): User
    userPosts(author: String!): [Post!]
    users(name: String): [User!]!
}

type User {
    age: Int
    comments: [Comment]!
    email: String!
    id: ID!
    name: String!
    posts: [Post]!
}

input CreateCommentInput {
    author: ID!
    post: ID!
    text: String!
}

input CreatePostInput {
    author: ID!
    body: String!
    published: Boolean!
    title: String!
}

input CreateUserInput {
    age: Int
    email: String!
    name: String!
}

input UpdateUserInput {
    age: Int
    email: String
    name: String
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input UpdateCommentInput {
    text: String
}
